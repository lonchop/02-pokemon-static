---
import MainLayout from "@layouts/MainLayout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import type { Pokemons, Result } from "@interfaces/pokemons.interface";
import Title from "@components/shared/Title.astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = async () => {
  
  const response = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151")
  const { results } = await response.json() as Pokemons
  
  return results.map((pokemon: Result) => ({
    params: { name: pokemon.name },
    props: { name: pokemon.name, url: pokemon.url },
  }));
};

const { name } = Astro.params;
const { url } = Astro.props;

const pokemonId = url.split("/").at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${pokemonId}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemonId}.png`;
---

<MainLayout 
  title={`Pokemon - #${pokemonId} ${name}`}
  description={`Information about the pokemon - ${name}`}
  image={imageSrc}
>
  <section class="flex flex-col items-center justify-center">
    <div class="flex items-center justify-between">
      <div class="mb-4">
        <button
          onclick="history.back()"
          class="cursor-pointer text-blue-500"
        >
          Regresar
        </button>

          <Title>{name}</Title>
      </div>

      <button class="btn-favorite" data-name={name} data-id={pokemonId}>
        <Icon data-outline name="heart-outline" size={40} />
        <Icon data-filled name="heart-filled" size={40} class="hidden" />
      </button>
    </div>

      
      <PokemonCard name={name} url={url} isBig />

    <audio controls class="mt-4">
      <source src={audioSrc} type="audio/ogg" />
      <p>Your browser does not support the audio element.</p>
    </audio>
  </section>
</MainLayout>

<script>
  interface FavoritePokemon {
    id: number;
    name: string;
  }

  // // Se ejecuta antes de que Astro prepare el nuevo contenido para la navegación
  // // Útil para limpiar estados, detener animaciones o preparar la página para el cambio
  // document.addEventListener("astro:before-preparation", () => {
  //   console.log("before preparation");
  // });

  // // Se ejecuta después de que Astro ha preparado el nuevo contenido pero antes de mostrarlo
  // // Ideal para configurar el nuevo estado de la página o inicializar componentes
  // document.addEventListener("astro:after-preparation", () => {
  //   console.log("after preparation");
  // });

  // // Se ejecuta justo antes de que Astro intercambie el contenido de la página anterior por el nuevo
  // // Perfecto para guardar el estado actual o ejecutar animaciones de salida
  // document.addEventListener("astro:before-swap", () => {
  //   console.log("before swap");
  // });

  // // Se ejecuta después de que Astro ha intercambiado el contenido de la página
  // // Ideal para re-inicializar JavaScript, aplicar estilos o ejecutar animaciones de entrada
  // document.addEventListener("astro:after-swap", () => {
  //   console.log("after swap");
  // });

  const handlePageLoad = () => {
    // Cargar favoritos desde localStorage
    let favoritePokemons: FavoritePokemon[] = JSON.parse(localStorage.getItem("favorite-pokemons") || "[]");
    console.log("Pokemons favoritos:", favoritePokemons);

    // Buscar el botón de favoritos en la página actual
    const btnFavorite = document.querySelector(".btn-favorite") as HTMLButtonElement;

    // Verificar que el botón existe (importante para evitar errores)
    if (!btnFavorite) return;

    const idPokemon = btnFavorite.dataset.id ?? "";
    const namePokemon = btnFavorite.dataset.name ?? "";
    
    // Verificar si el pokemon ya es favorito
    const isFavorite = favoritePokemons.some((pokemon) => pokemon.name === namePokemon);

    const heartOutline = btnFavorite.querySelector("[data-outline]") as HTMLElement;
    const heartFilled = btnFavorite.querySelector("[data-filled]") as HTMLElement;

    // Configurar estado inicial de los corazones
    if (isFavorite) {
      // Si es favorito: mostrar corazón lleno, ocultar vacío
      heartOutline.classList.add("hidden");
      heartFilled.classList.remove("hidden");
    }

    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some((pokemon) => pokemon.name === namePokemon);

      if (isFavorite) {
        // Remover de favoritos
        favoritePokemons = favoritePokemons.filter((pokemon) => pokemon.name !== namePokemon);
      } else {
        // Agregar a favoritos
        favoritePokemons.push({ 
          id: +idPokemon, 
          name: namePokemon 
        });
      }

      // Guardar en localStorage después de modificar el array
      localStorage.setItem("favorite-pokemons", JSON.stringify(favoritePokemons));
      
      // Retornar el nuevo estado
      return !isFavorite;
    }

    btnFavorite.addEventListener("click", () => {
      // Cambiar la UI
      heartOutline.classList.toggle("hidden");
      heartFilled.classList.toggle("hidden");

      // Actualizar el estado en localStorage
      toggleFavorite();
    });
  }

  // Se ejecuta al final del proceso de navegación, cuando la página está completamente cargada y visible
  // Es el momento ideal para re-inicializar JavaScript, event listeners y cualquier funcionalidad interactiva
  document.addEventListener("astro:page-load", handlePageLoad);
</script>

<style>
  @reference "tailwindcss";
  .btn-favorite {
    @apply cursor-pointer text-blue-500 ml-4 hover:animate-pulse transition-all duration-300;
  }
</style>